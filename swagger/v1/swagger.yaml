---
openapi: 3.0.1
info:
  title: API V1
  version: v1
paths:
  "/admin/users":
    get:
      summary: Retrieves all users
      tags:
      - Admin
      parameters:
      - name: page
        in: query
        description: Page number
        schema:
          type: integer
      - name: per_page
        in: query
        description: Number of users per page
        schema:
          type: integer
      - name: Authorization
        in: header
        description: JWT Token
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        name:
                          type: string
                        email:
                          type: string
                        created_at:
                          type: string
                          format: date-time
                        updated_at:
                          type: string
                          format: date-time
                  page:
                    type: integer
                  total_pages:
                    type: integer
        '401':
          description: Unauthorized
  "/admin/roles":
    get:
      summary: Retrieves all roles
      tags:
      - Admin
      parameters:
      - name: Authorization
        in: header
        description: JWT Token
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Roles retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  roles:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        name:
                          type: string
                        permissions:
                          type: Array
                          items:
                            type: string
                            example: __add_user_role__
                        created_at:
                          type: string
                          format: date-time
                        updated_at:
                          type: string
                          format: date-time
                  page:
                    type: integer
                  total_pages:
                    type: integer
        '401':
          description: Unauthorized
  "/admin/users/{user_id}/roles":
    get:
      summary: Retrieves roles for a specific user
      tags:
      - Admin
      parameters:
      - name: user_id
        in: path
        description: User ID
        required: true
        schema:
          type: integer
      - name: Authorization
        in: header
        description: JWT Token
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Roles retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
                    permissions:
                      type: array
                      items:
                        type: string
        '401':
          description: Unauthorized
  "/admin/users/{user_id}/roles/{role_id}/add":
    post:
      summary: Adds a role to a specific user
      tags:
      - Admin
      parameters:
      - name: user_id
        in: path
        description: User ID
        required: true
        schema:
          type: integer
      - name: role_id
        in: path
        description: Role ID
        required: true
        schema:
          type: integer
      - name: Authorization
        in: header
        description: JWT Token
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Role added successfully
        '401':
          description: Unauthorized
  "/admin/users/{user_id}/roles/{role_id}/remove":
    delete:
      summary: Removes a role from a specific user
      tags:
      - Admin
      parameters:
      - name: user_id
        in: path
        description: User ID
        required: true
        schema:
          type: integer
      - name: role_id
        in: path
        description: Role ID
        required: true
        schema:
          type: integer
      - name: Authorization
        in: header
        description: JWT Token
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Role removed successfully
        '401':
          description: Unauthorized
  "/signup":
    post:
      summary: Creates a user and returns an authentication token
      tags:
      - Authentication
      parameters: []
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '422':
          description: Validation errors
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
                      example: Email is invalid
                required:
                - errors
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: Email of the user
                  example: user@example.com
                name:
                  type: string
                  description: Name of the user
                  example: John Doe
                password:
                  type: string
                  description: Password for the user account
                  example: securePassword123
                password_confirmation:
                  type: string
                  description: Confirmation of the password
                  example: securePassword123
              required:
              - email
              - name
              - password
              - password_confirmation
  "/login":
    post:
      summary: Authenticates a user and returns an authentication token
      tags:
      - Authentication
      parameters: []
      responses:
        '200':
          description: User authenticated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '401':
          description: Invalid email or password
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
                      example: Invalid email or password
        '422':
          description: Password is required
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Email is required
                  errors:
                    type: array
                    items:
                      type: string
                      example: Password is required
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: Email of the user
                  example: user@example.com
                password:
                  type: string
                  description: Password for the user account
                  example: securePassword123
              required:
              - email
              - password
  "/events":
    get:
      summary: Retrieves a list of events filtered by user ID, start time, end time,
        name, and location
      tags:
      - Events
      parameters:
      - name: page
        in: query
        description: Page number
        schema:
          type: integer
      - name: per_page
        in: query
        description: Number of events per page
        schema:
          type: integer
      - name: user_id
        in: query
        description: Filter by User ID
        schema:
          type: integer
      - name: start_time
        in: query
        format: date-time
        description: Filter by start time (events starting from this time onwards)
        schema:
          type: string
      - name: end_time
        in: query
        format: date-time
        description: Filter by end time (events ending before this time)
        schema:
          type: string
      - name: name
        in: query
        description: Filter by event name (partial match)
        schema:
          type: string
      - name: location
        in: query
        description: Filter by event location (partial match)
        schema:
          type: string
      responses:
        '200':
          description: Events retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  events:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        name:
                          type: string
                        description:
                          type: string
                        location:
                          type: string
                        start_time:
                          type: string
                          format: date-time
                        end_time:
                          type: string
                          format: date-time
                        user_id:
                          type: integer
                  page:
                    type: integer
                  total_pages:
                    type: integer
    post:
      summary: Creates an event
      tags:
      - Events
      parameters:
      - name: Authorization
        in: header
        description: JWT Token
        required: true
        schema:
          type: string
      responses:
        '201':
          description: Event created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  description:
                    type: string
                  location:
                    type: string
                  start_time:
                    type: string
                    format: date-time
                  end_time:
                    type: string
                    format: date-time
                  user_id:
                    type: integer
        '422':
          description: Validation errors
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
                      example: Name can't be blank
                required:
                - errors
        '401':
          description: Only authenticated users can create events
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
                      example: Unauthorized
                required:
                - errors
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the event
                  example: Tech Meetup
                description:
                  type: string
                  description: Description of the event
                  example: A meetup for tech enthusiasts
                location:
                  type: string
                  description: Location of the event
                  example: 123 Main St
                start_time:
                  type: string
                  format: date-time
                  description: Start time of the event
                  example: '2024-08-30 18:00:00'
                end_time:
                  type: string
                  format: date-time
                  description: End time of the event
                  example: '2024-08-30 20:00:00'
              required:
              - name
              - location
              - start_time
              - end_time
  "/events/{id}":
    parameters:
    - name: id
      in: path
      description: ID of the event
      required: true
      schema:
        type: integer
    get:
      summary: Retrieves an event
      tags:
      - Events
      responses:
        '200':
          description: Event retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  description:
                    type: string
                  location:
                    type: string
                  start_time:
                    type: string
                    format: date-time
                  end_time:
                    type: string
                    format: date-time
                  user_id:
                    type: integer
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
                      example: Event not found
    put:
      summary: Updates an event
      tags:
      - Events
      parameters:
      - name: Authorization
        in: header
        description: JWT Token
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Event updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  description:
                    type: string
                  location:
                    type: string
                  start_time:
                    type: string
                    format: date-time
                  end_time:
                    type: string
                    format: date-time
                  user_id:
                    type: integer
        '422':
          description: Validation errors
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
                      example: Name can't be blank
                required:
                - errors
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
                      example: Unauthorized
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the event
                  example: Updated Tech Meetup
                description:
                  type: string
                  description: Updated description of the event
                  example: An updated meetup for tech enthusiasts
                location:
                  type: string
                  description: Updated location of the event
                  example: 123 Updated Main St
                start_time:
                  type: string
                  format: date-time
                  description: Updated start time of the event
                  example: '2024-08-30 19:00:00'
                end_time:
                  type: string
                  format: date-time
                  description: Updated end time of the event
                  example: '2024-08-30 21:00:00'
              anyOf:
              - name
              - description
              - location
              - start_time
              - end_time
    delete:
      summary: Deletes an event
      tags:
      - Events
      parameters:
      - name: Authorization
        in: header
        description: JWT Token
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: ID of the event
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: Event deleted successfully
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
                      example: Event not found
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
                      example: Unauthorized
servers:
- url: http://{defaultHost}
  variables:
    defaultHost:
      default: localhost:3000
